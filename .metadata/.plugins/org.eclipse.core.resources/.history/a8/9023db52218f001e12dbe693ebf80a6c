package DGU;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;
import java.util.*;

public class Grade_2019111679_025_1 extends JFrame {

	private Container c = getContentPane();
	private Panel01 p01;
	private Panel02 p02;
	private String fileName;//다른 패널과 주고받는 변수
	
	Grade_2019111679_025_1(){

		setTitle("25_1 Ex");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		c.setLayout(new BorderLayout());
		
		//최초의 패널1 부착
		Panel01 p01 = new Panel01(this);
		c.add(p01,BorderLayout.CENTER);

		setSize(500, 350);
		setVisible(true);
	}

	void setFileName(String fn) {
		fileName = fn;

	}

	String getFileName() {
		return fileName;
	}

	void changePanel(int p) {//패널 바꾸기
		c.removeAll();//컨테이너 요소 모두 지우기
		if(p==1) {//패널 1로 전환
			p01 = new Panel01(this);
			c.add(p01);
		}

		if(p==2) {//패널 2로 전환
			p02 = new Panel02(this);
			c.add(p02);
		}
		c.revalidate();//패널 업데이트
	}

	public static void main(String[] args) {
		new Grade_2019111679_025_1();
	}
}

//첫번째 패널
class Panel01 extends JPanel{
	Panel01(Grade_2019111679_025_1 g){
		
		//파일명 입력
		JLabel fileNameLabel = new JLabel("파일 경로를 입력하세요");
		JTextField fileTf = new JTextField(30);

		//입력한 파일이름으로 새로운 파일 만들기
		JButton makeFileBtn = new JButton("파일 만들기");
		makeFileBtn.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				String fileName = fileTf.getText();
				g.setFileName(fileName);//파일이름 설정
				File newFile = new File(fileName);//파일 객체 생성
				try {
					if(newFile.createNewFile()) {
						g.changePanel(2);//존재하는 파일 없으므로 파일생성하고 패널바꾸기
					}
					else {//파일이 이미 존재함
						JOptionPane.showMessageDialog(makeFileBtn,"파일이 이미 존재합니다.");
					}
				}

				catch(IOException ie){//오류발생

					JOptionPane.showMessageDialog(makeFileBtn,"오류가 발생했습니다.");

				}


			}

		});

		//입력한 파일 불러오기

		JButton loadFileBtn = new JButton("파일 불러오기");

		loadFileBtn.addActionListener(new ActionListener() {

			@Override

			public void actionPerformed(ActionEvent e) {

				String fileName = fileTf.getText();

				g.setFileName(fileName);//파일이름 설정

				g.changePanel(2);//패널 바꾸기

			}

		});

		//패널에 요소 추가

		setLayout(new FlowLayout());

		add(fileNameLabel);

		add(fileTf);

		add(makeFileBtn);

		add(loadFileBtn);

	}

}

//두번째 패널

class Panel02 extends JPanel{

	private Vector fruitName;

	private String fileName;

	private JComboBox cb;


	Panel02(Grade_2019110747_25_2 g){

		//초기화

		fileName = g.getFileName();//업데이트된 파일이름 가져오기

		//기존파일 읽어오기

		try(BufferedReader br = new BufferedReader(new FileReader(fileName))){

			fruitName = new Vector();//과일 이름

			while(true) {

				String line = br.readLine();

				if(line == null) break;

				fruitName.add(line);	

			}

		}

		catch(IOException e) {

			//오류발생 다이어로그

			JOptionPane.showMessageDialog(this,"오류가 발생했습니다.");

		}

		//추가, 삭제 텍스트필드와 버튼, 콤보박스

		JPanel topPanel = new JPanel();

		topPanel.setPreferredSize(new Dimension(500,70));

		JLabel nameLabel = new JLabel("추가 또는 삭제할 과일이름을 입력하세요.");

		JTextField nameTf = new JTextField(20);

		JButton addNameBtn = new JButton("추가하기");

		JButton deleteNameBtn = new JButton("삭제하기");

		cb = new JComboBox(fruitName);//기존파일을 넣은 콤보박스 만들기

		cb.setPreferredSize(new Dimension(150,25));//파일에 아무것도 없을 것을 대비하여 사이즈 크기 지정

		//탑패널에 요소들 추가

		topPanel.add(nameLabel);

		topPanel.add(nameTf);

		topPanel.add(addNameBtn);

		topPanel.add(deleteNameBtn);

		topPanel.add(new JLabel("현재 이름 목록: "));

		topPanel.add(cb);

		//이미지 출력 패널

		JPanel imagePanel = new JPanel();

		JLabel imageLabel = new JLabel();//이미지라벨

		imagePanel.add(imageLabel);

		JButton returnBtn = new JButton("처음으로");//처음으로 돌아가는 버튼

		//버튼에 액션 리스너 달기

		addNameBtn.addActionListener(new ActionListener() {//추가버튼

			@Override

			public void actionPerformed(ActionEvent e) {

				String newFruitName = nameTf.getText();//텍스트 필드 입력값가져오기

				fruitName.add(newFruitName);//벡터에 추가하기

				updateFile();//파일 업데이트하기

				nameTf.setText("");//텍스트필드 비우기

			}

		});

		deleteNameBtn.addActionListener(new ActionListener() {//삭제버튼

			@Override

			public void actionPerformed(ActionEvent e) {

				String deleteFruitName = nameTf.getText();//텍스트 필드 입력값가져오기

				if(fruitName.contains(deleteFruitName)) {//삭제할 요소가 있는 경우

					fruitName.remove(deleteFruitName);//벡터에서 해당 요소 지우기

					updateFile();//파일 업데이트하기

					nameTf.setText("");//텍스트필드 비우기

				}

				else {//삭제할 요소와 일치하는 요소가 없는 경우

					JOptionPane.showMessageDialog(deleteNameBtn,"해당 요소가 없습니다.");

					nameTf.setText("");//텍스트필드 비우기

				}

			}

		});

		returnBtn.addActionListener(new ActionListener() {//처음으로 돌아가기 버튼

			@Override

			public void actionPerformed(ActionEvent e) {

				g.changePanel(1);//패널1로 바꾸기

			}

		});

		cb.addActionListener(new ActionListener() {//콤보박스 선택시 이미지 출력

			@Override

			public void actionPerformed(ActionEvent e) {

				String name = (String) cb.getSelectedItem();//선택된 콤보박스 이름가져오기

				String imageName = "images/"+name+".jpg";//이미지 경로 설정

				ImageIcon image = new ImageIcon(imageName);//이미지 아이콘 생성

				imageLabel.setIcon(imageSize(image));//사이즈 조절된 이미지 아이콘 이미지 라벨에 넣기

			}

		});

		//요소들 패널에 추가하기

		setLayout(new BorderLayout());

		add(topPanel,BorderLayout.NORTH);

		add(imagePanel,BorderLayout.CENTER);

		add(returnBtn,BorderLayout.SOUTH);

	}

	//파일과 콤보박스를 업데이트하기

	void updateFile() {

		try(BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))){//파일 덮어쓰기(변경된 벡터를 작성하므로)

			for(int i=0;i

				bw.write(fruitName.get(i));

				if(i!=fruitName.size()-1) bw.newLine();//마지막줄은 줄바꿈 하지 않기

			}//try문 벗어나면 파일 자동 저장

			//벡터는 setModel에 인자로 사용할 수 없으므로, 콤보박스모델로 정의함

			DefaultComboBoxModel newModel = new DefaultComboBoxModel<>(fruitName);

			cb.setModel(newModel);//콤보박스 업데이트

		}

		catch(IOException e) {

			//오류 메세지 다이어로그

			JOptionPane.showMessageDialog(this, "오류가 발생했습니다.");

		}

	}

	//이미지 사이즈 조절 함수

	ImageIcon imageSize(ImageIcon i) {

		Image image = i.getImage();

		ImageIcon scaledImage = new ImageIcon(image.getScaledInstance(200, 200, Image.SCALE_SMOOTH));

		return scaledImage;

	}