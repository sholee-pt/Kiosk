package DGU;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.nio.charset.*;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Grade_2019111679_025 extends JFrame {
    private int w, h;
    private String fpath = "c:\\Q202\\files\\fruits.txt";
    private JLabel imgLabel = new JLabel();
    private JComboBox<String> strCombo;
    private ImageIcon[] images;
    private String[] fruits;

    public Grade_2019111679_025() {
    	
    	Scanner sc = new Scanner(System.in);
    	System.out.print("이미지의 가로 길이를 입력하세요: ");
        w = sc.nextInt();
        System.out.print("이미지의 세로 길이를 입력하세요: ");
        h = sc.nextInt();
    	
        fruits = loadList(fpath).toArray(new String[0]);
        strCombo = new JComboBox<>(fruits);
        linkImages();
        
        setTitle("using file");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Container c = getContentPane();
        c.setLayout(new FlowLayout());
        c.add(strCombo);
        c.add(imgLabel);

        JButton reload = new JButton("새로고침");
        JButton addButton = new JButton("추가");
        JButton deleteButton = new JButton("삭제");
        c.add(addButton);
        c.add(deleteButton);
        c.add(reload);

        reload.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                refreshComboBox();
            }
        });

        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String newFruit = JOptionPane.showInputDialog("과일 이름을 입력하세요:");
                if (newFruit != null && !newFruit.trim().isEmpty()) {
                    addFruit(newFruit);
                    refreshComboBox();
                    strCombo.setSelectedIndex(fruits.length - 1);
                }
            }
        });

        deleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedIndex = strCombo.getSelectedIndex();
                if (selectedIndex >= 0) {
                    String selectedFruit = strCombo.getSelectedItem().toString();
                    int confirm = JOptionPane.showConfirmDialog(null, "정말로 삭제하시겠습니까?", "삭제 확인", JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION) {
                        deleteFruit(selectedFruit);
                        refreshComboBox();
                        strCombo.setSelectedIndex(Math.max(0, selectedIndex - 1));
                    }
                }
            }
        });

        strCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int index = strCombo.getSelectedIndex();
                if (index >= 0 && index < images.length) {
                    imgLabel.setIcon(images[index]);
                }
            }
        });

        setSize(400, 200);
        setVisible(true);
        sc.close();
    }
    
    public static void main(String[] args) {
    	new Grade_2019111679_025();
    }

    public List<String> loadList(String filePath) {
        List<String> list = new ArrayList<>();
        try {
            list = Files.readAllLines(Paths.get(filePath), StandardCharsets.UTF_8);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "파일을 불러오는 중 오류가 발생했습니다: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return list;
    }

    public void addFruit(String newFruit) {
        try {
            Files.write(Paths.get(fpath), (newFruit + System.lineSeparator()).getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "파일에 쓰는 중 오류가 발생했습니다: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void deleteFruit(String selectedFruit) {
        try {
            List<String> list = loadList(fpath);
            if (!list.remove(selectedFruit)) {
                JOptionPane.showMessageDialog(null, "선택한 과일이 목록에 없습니다.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Files.write(Paths.get(fpath), list, StandardCharsets.UTF_8);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "파일에서 삭제하는 중 오류가 발생했습니다: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void refreshComboBox() {
        fruits = loadList(fpath).toArray(new String[0]);
        strCombo.setModel(new DefaultComboBoxModel<>(fruits));
        linkImages();
    }
    
    public void linkImages() {
    	transformImageSize trans = new transformImageSize();
        images = new ImageIcon[fruits.length];
        for (int i = 0; i < fruits.length; i++) {
            ImageIcon original = new ImageIcon("c:\\Q202\\images\\" + fruits[i] + ".png");
            ImageIcon resized = trans.transformImageSize(original, w, h);
            images[i] = resized;
        }
    }}